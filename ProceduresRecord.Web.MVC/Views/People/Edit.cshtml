@model ProceduresRecord.Web.MVC.Models.Person

@{
    ViewBag.Title = "Editar Persona";
}

<h2>@ViewBag.Title</h2>

@* Remember: Html.BeginForm gets the id from the URI, so no need to use a hidden id field *@
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Names, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Names, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Names, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Surnames, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Surnames, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Surnames, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RecordNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RecordNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RecordNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RecordYear, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RecordYear, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RecordYear, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NationalityId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.NationalityId, (IEnumerable<SelectListItem>)ViewBag.Countries, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.NationalityId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BirthPlaceId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.BirthPlaceId, (IEnumerable<SelectListItem>)ViewBag.Countries, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BirthPlaceId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*Chrome has a different behaviour for DatePickers so we have to manually set the proper date format so it's current value may be shown correctly.*@
                @if (Request.UserAgent != null && Request.UserAgent.Contains("Chrome"))
                {
                    @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @Value = @Model.BirthDate.ToString("yyyy-MM-dd"), @class = "form-control" } })
                }
                else
                {
                    @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
                }
                @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MinisterialResolution, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*Chrome has a different behaviour for DatePickers so we have to manually set the proper date format so it's current value may be shown correctly.*@
                @if (Request.UserAgent != null && Request.UserAgent.Contains("Chrome"))
                {
                    @Html.EditorFor(model => model.MinisterialResolution, new { htmlAttributes = new { @Value = @Model.MinisterialResolution.ToString("yyyy-MM-dd"), @class = "form-control" } })
                }
                else
                {
                    @Html.EditorFor(model => model.MinisterialResolution, new { htmlAttributes = new { @class = "form-control" } })
                }
                @Html.ValidationMessageFor(model => model.MinisterialResolution, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CheckNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CheckNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CheckNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RollNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RollNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RollNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Confirmar" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Volver a la Lista", "Index")
</div>